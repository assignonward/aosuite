
System Architecture:

The core concept of Assign Onward is the individually owned blockchain: simple, accessible, trustable.  They can range from a low activity, 100 low value transaction per year or less personal chain upward to typically something like a small business chain doing a couple million dollars a year in transactions.  Perhaps it could scale even larger, but the concept is to keep things small, accessible, trustable, so a larger business doing hundreds of millions of dollars per year in transactions would probably want to segment their transactions onto multiple chains, linked with agreed upon two way exchange rates, but still separate.

"Above" the individual chains would be a protocol suite.  Rather than complex on-chain governance, I would envision a chain that wants a change of rules to simply spin up another chain and transition the residual value from the old chain onto the new one.  This might be tweaking the parameters within an existing protocol, or transitioning to a different protocol with different rules and parameters.  While the spirit of Assign Onward is that anyone can create their own blockchain with any rules/protocols they want, in practice those who stick with readily recognized protocols will have much better software support and fungibility with other chains.

Recognized, tested and accepted protocols are kept in a protocol management blockchain, and this one is probably a good place to implement some form of on-chain governance with voting to recognize new protocols, deprecate old ones, identify bugs in processing software, etc.

Data Defined:

The protocols and data exchanges are all in data-typed json-like structures (1:1 translatable between human readable and binary representations).

All keys in the data structures are defined in a dictionary with a human readable name and type, ricey code (1 to 7 octets encoding up to 2^45 unique keys plus 16 data types) and a general description as an arbitrary length string.

Protocols define valid container types, the required and optional data contained therein, context specific descriptions of the key-value fields defined in the containers, and potentially valid and recommended ranges for the values in each defined key-value.

Protocols also define operations required to make valid container types.  Things like cryptographic signature validity, summation of values, equality of summed groups, non-repeat of signatures in the chain, etc.

Off-chain negotiations (Advertising, proposal, offer, acceptance, recording) re-use the same json/bsonish structures, dictionary, operations and protocol definitions as are used for on-chain recording.

Network communication of negotiation packets may happen by any method: message broker, http put/post, e-mail wrapped, SMS wrapped, QR codes - printed and carried by pigeons, whatever.  The necessary part is the preparation of the negotiation packet by the authorized (holders of the involved private keys) actors.  Having said all that, MQTT topic exchanges (possibly hosted on RabbitMQ or similar) seem like a good starting point for the reference implementation.  While json/bsonish representations are fully interchangeable, bsonish is the only format that should ever be used for inter-agent negotiations and chain recordings.  The json form is only for developers / debugging use - although some applications may choose to receive bsonish from the outside, translate it to json, to all manipulations in json, the translate back to bsonish for external communication - that's their business, they could translate it to other formats if they choose for internal use also.

Protocol definitions also specify valid operations on defined containers, at the most basic level: what makes a new block on the chain valid, or invalid.  Also, off chain pre-recording negotiations.

Test Driven:

Implementations are tested against the protocols they claim to support.  They must be able to produce valid results, and recognize and report invalid inputs and complete negotiations including: advertisement, presentation of available advertisements, proposal, offer, acceptance, recording, and reporting of successful recording.

Environment:

Exchange with other forms of cryptocurrency are a part of the landscape, but outside of the specific Assign Onward specifications and protocols.  The goal within Assign Onward is to define a set of freely interoperable blockchains such that share traders can setup algorighmic bid/ask ratios between the various chains establishing market values which chain owners who provide value in exchange for their coins can leverage to access other coins which they can trade for valuable goods and services.

Each blockchain should have three or more active processors which hold between them enough staked shares to "51% guarantee" live transactions even when one is unreachable.  In practice, the network of processors would recognize several, perhaps all active, Assign Onward protocols and any node should be able to process any transaction on any chain - the trick is: which ones hold enough staked shares to adequately underwrite the transaction on the given chain.  Since most chains are "closely held" the chain owner should retain at least 51% of outstanding shares (more like 76% if they are only using three processor nodes) to guarantee all transactions that pass through.  When using 5 processing nodes, any 4/5 must total more than 50% of shares, so each node must hold at leas 12.5%, for a total holding requirement greater than 62.5%, less holding required, but more underwriting nodes to contact to be sure that the transaction is properly processed by trusted nodes.

In the event of a single node "gone rogue" the staked shares on that node can be immediately unstaked using the remaining trusted servers which tTotal more than 50%, and presumably another node can be established with those shares to restore redundancy.

Large processors of multiple chains might make up their own rules about acceptable fee ratios, acceptable protocols, etc. but, any individual should be able to spin up their own processor instances on various cloud services or even a home PC to provide recording and reporting for their own chain(s).

Staked shares might be processed on a network of multiple machines at multiple addresses - the key is: the staker of shares trusts a processor, and the processor trusts zero or more nodes to carry out transactions with the shares they have been entrusted with.

Exchange negotiation:

Advertisement. Non binding, however failure to follow through can impact reputation of advertiser (more like: multiple recorded follow throughs boosts reputation)0, only identifies offerer plus N coins offered on chain X in exchange for M coins on chain Y before time T.  Rejection of advertisement only by non response.

Proposal. Non binding.  Identifies proposer to accept Advertisement or subset thereof.  If not a subset of an Advertisement then this is a non solicited proposal (may not be considered by some agents).  Identifies proposer to receive number of shares on chain X in exchange for specific shares on chain Y with possible (probable) receiver of excess shares on Y, by time U sooner than or same as T in advertisement.  Optionally may be signed by a long term id, multiple follow throughs of proposals boosts reputation.  If rejected, should state reason, possibly counter propose.

Offer, binding on acceptance, identifies all parties in transaction and specific shares on both chains.  Should match proposal exactly but if not may still be accepted on its own merits, potentially substituting specific share sources.  Signed by all share offerers and potentially a long term id.  Similar reputation impact for follow through (when signed with long term id).  Non solicited offers generally don't work due to identification of share sources except in the rarely acceptable counter offer case.  Otherwise restart with a new proposal.

Acceptance, must match offer exactly (otherwise make counter offer).  Signed by all share accepters and optionally a long term id.  Binding until expired by time.

Recording, once acceptance is recorded in both chains with cross chain proof before the recording deadline, the transaction is complete.  Note that underwriting may need to reach 50% before recording is complete.

Philosophy 2021:

It took me awhile to settle with the idea that proof of correctness is really proof of stake and that's o.k. as long as people have the ability to control their own chains.

There's a bit of "enforced simplicity" in the Ⓐ2021 protocol thinking: Only 8 data types, arranged as single values or one dimensional arrays.  If you need floating point, or UTF-16 encoded strings, or multi-dimensional arrays, or blocks larger than 2GB, or smart contracts, or any other form of general programmability, or... layer that implementation on top of the Ⓐ protocol.  The Ⓐ layer is all about providing a simple blockchain protocols with share/control tracking.  Coins vs shares is about bringing the share ownership picture into human relatable scale, particularly with variable numbers of shares that arise from "share burning" operations.

One very simple way to incorporate general programmability into the "next layer" would be use a string to store a html+javascript page.  Image files and other resources for the page could be encoded in containers with string names and byte arrays.  Of course this is completely insecure and uncontrollable.  The images contained could be objectionable, the page could link to websites that used to be benign but changed to become malicious, information can be hidden steganographically later to be exposed as objectionable / illegal.  This all speaks to the concept of "severability" where the source information might be censored from future reportings of the chain contents, but the hash codes of that information are always reported and folded into the block-chain hash codes so there is no chance for repudiation of the content.  As detailed previously, "functional" information required to make the chain protocol work must always be reported in full, but optional information should always be segregated into severable branches of the blockchain so that exclusion of that information from future reports does not affect the final hash code computation.  In normal circumstances, the branch information would be included in any queries, but if it "taints" a blockchain making it illegal in some way, it can be excluded to make the reported chain legal again without affecting the hash codes.  Persons who hold a copy of the excluded information can still prove when and where they recorded it on the blockchain.

Some personal chains might be backed by goods or services alone, others might hold a basket of various coins to support their value, often a combination of both.  In reality, it is coin held by others and offered for trade that supports value.  For instance YKK represents a $2 cup of coffee and BCG represents a $10  of goat.  Someone who holds BCG might advertise 5 BCG for 26 YKK.  This implicitly values YKK at $1.92, for people who value BCG at $10.  It is a price support that slows crashing of YKK value.  The BCG might be staked with a transaction underwriter, earning interest with each BCG transaction underwritten, but once traded for YKK then the YKK can be staked and may earn even better interest due to higher trading volume.

Small chain owners should retain control of a large majority of shares to ensure they can underwrite transactions and prevent hostile activity on their chain.  If a malicious party ever gains 51% control of their chain, they can ruin its integrity.  The chain owner might try to salvage some value by identifying the bad actor and offering other share holders a minority stake in a new chain, but confidence in both chains is likely to suffer.  If additional liquidity is required it is likely better to retain control of the original chain and issue a new chain.

The problem with market float of small chains is the disparity of value.  It might only take $50k or less to get control of a smaller chain, and it might be worth that to a larger actor to put the smaller actor out of business.  Smaller actors cheapest defense is to retain a super majority of their own shares, and "right size" their float to meet market demand without over or undersupply.

More Rambling:

Over time experience might show in certain markets that the signature of the chain owner or maybe another long term trusted i.d. is as good as or better than 50% staked underwriting.

While shares are a form of debt for the chain owner,  even after the owner has retired and no longer provides goods or services in exchange for their shares, the trust they have built over the years might continue to provide value while operating their chain as a financial instrument providing liquidity between their trading partners.  They might also prove their holdings of shares on other chains by including proof of ownership in their advertising for exchange, in essence pledging those shares to owners of shares on their chain through advertisement.

--------------------

Being "individual" these blockchains can also have their points of service identified in realtime via GPS.  Food trucks, ride shares, mobile pet groomers, physical businesses don't strictly require geographic addresses anymore.  Also, service providers like writers, accountants, auditors, sales representatives can provide internet addresses for their contact and exchange services for Assign Onward coins, either on their own blockchains, or just trading coins of value to them on other people's blockchains.  Running your own blockchain(s) is not at all a requirement to participate in the Assign Onward network - running your own blockchain is akin to taking a loan from the community, a loan you pay back with services - in full when you recapture control of all outstanding shares on your chain.
 
Blockchain ownership might normally be individual, but in practice it is entirely fungible.  Any person or entity willing to provide value in exchange for "coins" on a chain can start accumulating shares on the chain.  If the original owner of the chain wants to retire but others are holding shares on the chain and don't want to release them for what the original owner is offering, the owner can simply abandon the chain and it may live on being exchanged by others for whatever perceived value it has, presumably conferred by some other entity that has a store of value they have committed to exchange for coin of the chain.

One might envision periodic on-chain advertisements where the person(s) providing value in exchange for the coins on the chain make non-binding statements as to what holders of the coin can expect in exchange for their coin going forward.  Coin spenders can likewise informally relate their satisfaction with value delivered in exchange for coin at the time of use, and potentially afterwards as well.

Tipping after the fact: in many circumstances, it is impossible to know how satisfied you are with a product or service until after the purchase and even payment of a tip.  With Assign Onward, the required payment may be made up front before delivery of the good or service, and afterwards - either immediately or minutes to days or even weeks later, a tip can easily be sent through the network, directly tied to the transaction.  The same system makes "money back guarantee" quite a bit more binding on the seller.



On Recording Costs:

Say a 1TB SSD consumes 10W to keep it "online"

Say this blockchain is expected to be fully replicated online for 10 years on 10 devices. (Partial replication on more devices for longer time might be more realistic.)

Say the cost of electricity is $0.15/kWh

100 device years is 876576 hours, or 8765.76 kWh for all 10 devices for 10 years

Cost of electricity is ~$1315  

Cost of hardware is ~$1000

Total cost to record 1TB of data is $2315

Cost to record 1 byte is $0.000 000 002 315 or 0.000 000 000 231 500 coins

4319654427 bytes can be recorded per coin: 1/4319654427 coins per byte - this would be a constant (more likely 1/4000000000)

Say the chain represents 100,000 coins

Say the number of shares is 1 000 000 000 000 000 000  (~2^60)

Starts as 10 000 000 000 000 (10^13) shares per coin

So, initially, each byte recorded requires 2 500 shares.

For any transaction: figure out the number of shares required to record, round up to the next share any residual fraction, and this becomes an "on chain reward" for validators/recorders.

If an ordinary transaction requires ~10kB of data (maybe as little as 1kB if we squeeze hard), that's 25 000 000 shares, or 0.000 002 5 coins, or 0.0025 cents- 0.00025 cents if you squeeze to 1k.

For a 40MB NFT transaction, the similarly calculated recording fee would be: $0.10

I might advocate that "average" transactions include a photograph (of whatever) taken by each party at the time of offer/acceptance, maybe 1MB each, so that would be 2MB with a byte recording fee of ~$0.005

Random concepts:

Shares vs Coins: A coin has a nominal value, a share is a fraction of the total coin value of the chain.  Typically, the "coin value" of the chain remains constant while the number of shares can remain constant or drop.  When the number of shares drop, share owners' equivalent coin holdings inflate.  

Burned shares: shares which are permanently removed from the chain, reducing the "coins/share denominator" and inflating the value of all remaining shareholders shares when computed as "coins."

Inactivity tax: shares are expected to change ownership at least once a year.  Zero inactivity tax for shares moving within 365.24 days of their last movement.  Between 1 and 6 years, the tax increases linearly from 0% to 5%.  Year 6-7 the tax increases linearly from 5% to 100%, shares not traded within 7 years are completely burned.  Inactivity tax up to 5% is 100% claimed by the validators/recorders, additional (year 6-7 above 5%) inactivty tax is 100% burned.

HFT tax: shares are expected to change hands 3x or less per hour.  Each additional transaction in an hour are taxed at 1% (4th movement is taxed 1%, 5th movement taxed 2%, 6th movement taxed 3%, etc.)  Similarly 6 "free trades" per 24 hours, 21 "free trades" per week and 30 "free trades" per 30 days, with a maximum HFT tax of 10%.  High volume traders would be expected to hold a significant number of shares and so could move their "settled" shares first.  Anyone receiving "hot shares" would have to wait a month, at most, to trade those shares HFT tax free, and might demand 10% additional shares to compensate.  Any HFT tax due is 100% burned.

Compressed Block Data: Transactional block information is never compressed (beyond bsonish representation) in "standard" communications.  Payload information (images, etc.) are encouraged to be compressed with well known standard algorithms - saving recording fees.

Multi-chain contract: A secure transfer of shares executed on two chains.

  High Level: Alice wants to trade 3 coins on Chain 2 to Bob for 2 coins on Chain 1.

  Down one level: Alice has 40000 shares on Chain 2 representing 20 coins, and she's proposing giving 6000 of those shares, representing 3 Chain 2 coins to Bob in exchange for 20000 of his 100000 shares he holds on Chain 1, representing 2 of his 10 Chain 1 coins.
    Alice's 40000 Chain 2 shares are held by Actor 4's key below.  She creates a new key pair, Actor 2, that will receive the 20000 (N) Chain 1 shares from Bob's existing Actor 1 key which currently holds 100000 shares.  Bob will create a new key pair, Actor 3, to receive the 6000 (M) shares from Alice's Actor 4 key on Chain 2.  The below illustration ignores the fact that Alice is also creating an Actor 6 key pair to receive the excess 34000 shares on Chain 2 from Actor 4, and Bob will be creating an Actor 5 key pair to receive the excess 80000 shares on Chain 1 from his Actor 1 key.  We are also neglecting the transaction fees which might amount to 1% or less of the transaction, so there will be that small amount deducted from the final transferred shares numbers, which can either be handled by bumping up the amount given, or accepting a smaller amount received on each side.  The actual process will have additional steps where the transaction is proposed with maximum acceptable gives and minimum acceptable receives and if the simulated validation/recording fees work to the liking of all parties, then the transaction goes forward to recording.  Also note, the proposal might include a collection of multiple keys providing the needed shares rather than just one key holding more shares than needed for the transaction.

  Simple contingency: Times always increasing
    Time 0 Chain 1 Actor 2 proposes Actor 4 would offer M shares on Chain 2 in exchange for N shares on Chain 1 offered to Actor 2 before Time X. (Informal step, not recorded)
    Time 1 Chain 1 Actor 1 offers  Actor 2 N shares contingent on Actor 3 receiving M shares from Actor 4 on Chain 2 before Time X (1 < X).
    Time 2 Chain 1 Actor 2 accepts Actor 1's contingent offer from Time 1 (2 < X).
    Time 3 Chain 2 Actor 4 offers  Actor 3 M shares contingent on Actor 2 receiving N shares from Actor 1 on Chain 1, acceptance required before Time Y (3 < Y < X).
    Time 4 Chain 2 Actor 3 accepts Actor 4's contingent offer from Time 3 (4 < Y < X).
    Time 5 Chain 2 Record transactions from Time 1-4 (5 < Y < X).
    Time 6 Chain 1 Actor 2 proves  Actor 3's receipt of M shares from Actor 4 on Chain 2, validating the contingency at Time 1 (6 < X for good form) - from Time 6 forward, Actor 2 is the owner of the N shares on Chain 1
    Time 7 Chain 2 Actor 3 proves  Actor 2's receipt of N shares from Actor 1 on Chain 1, validating the contingency at Time 3 (7 < X for good form) - from Time 7 forward, Actor 3 is the owner of the M shares on Chain 2

  Recording requirements: 
    Assuming Actor 1/3 are the same entity, similarly Actors 2/4 are are the same entity different from the 1/3 entity.

    Time 0-4 transactions completed off-chain, signed by their proposer / offerer / acceptor Actors and binding until Time X, successful execution (7), or recorded valid expiration.

    If the above bundle of transactions (1-4) is recorded on Chain 2 before Time Y, this ties up the M shares on Chain 2 until Time X.
    If Time Y passes without recording the transactions on Chain 2, Actor 3 and/or 4 may record a notice of expiration in Chain 2, invalidating the transaction and freeing the M shares to Actor 3's control from the time of recording of the notice of expiration.  The recording of expiration is not necessary if no record appears on the chain, but it clears any uncertainty about the intent of the expiration recorder who had previously signed an intent to transfer shares which apparently did not get recorded.
    If Time Y passed without recording but all parties still desire the transaction, a new transaction should be processed with later expiration times. A notice of expiration of the previous transaction(s) may be included in the new transaction to avoid any uncertainty.

    If transactions 1-4 plus proof of recording in Chain 2 (blocktime and hash) is recorded in Chain 1 before Time X (the Time 6 action), this completes the transaction on Chain 1 - the N shares are now controlled by Actor 2 from the time of recording - no need to wait for Time X anymore - all necessary offers and acceptances for the release of N shares to Actor 2 are validly recorded in both chains.
    If a valid expiration was recorded on Chain 2 after Time Y by Actors 3 or 4, Actor 1 or 2 may record proof of the expiration on Chain 1 which would free up the N shares at the time of recording without having to wait for X, and clear any uncertainty about the expired transaction.
    If Time X passes without recording the transactions on Chain 1, Actors 1 or 2 may record a notice of expiration in Chain 1, freeing the N shares in Actor 1's control from the time of recording.  This expiration also serves as proof of expiration for the transaction on Chain 2 and Actor 3 or 4 may record proof of this recording in Chain 1 (blocktime and hash) in Chain 2 to complete and clarify the invalidation of the transaction in Chain 2.
    If Time X passes and all parties still desire the transaction, expiration of the previous transaction should be recorded along with initiation of a new transaction with later expiration times.

    Recording on Chain 2 of the proof of the Time 6 transaction on Chain 1 (the Time 7 transaction) finalizes the transaction on Chain 2 and frees the M shares for use by Actor 3 immediately.  Although the transaction was complete when recorded at Time 6 in Chain 1, there was no proof of this in Chain 2 which was uncertain if the transaction really happened in Chain 1, or expired before Time X.  The transaction can no longer be voided after the Time 6 recording in Chain 1, but remains in limbo on Chain 2 until proof of completion is recorded.

    Back to a higher level look: Time 0-4 steps are signed proposal/offer/acceptance steps carried out between the parties off-chain.  In reality, the Time 0 proposal would go to a simulated recording cost estimation for both chains and result in a transaction something like: Alice gives 3.015 coins on Chain 2 and gets 1.99 coins on Chain 1, Bob gives 2.01 coins on Chain 1 and gets 2.985 coins on Chain 2.  The 0.03 Chain 2 coins and 0.02 Chain 1 coins go in part to the processors who validate/record the transactions, and part get "burned" inflating everyone's coin to Shares ratio by a tiny amount.  So, once the transaction is proposed, simulated, final priced, then it's up to Alice and Bob if they want to accept that.  If they do, then:

   Alice sends a formal step 0 to Bob, 
   Bob sends a formal step 1 to Alice, 
   Alice sends formal steps 2 and 3 to Bob, 
   Bob sends a formal step 4 to Alice
     Now Alice and Bob both have steps 1-4 ready to execute, 
   Alice records formal steps 1 through 4 on Chain 2 as step 5, and the result of that on Chain 1 as step 6 which releases the shares Alice wants on Chain 1.  
   Bob records the result of step 6 on Chain 2, releasing the shares he wants on Chain 2.



